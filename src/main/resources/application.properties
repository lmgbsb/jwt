## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:mysql://localhost:3306/blog?useSSL=false
spring.datasource.username=blog_user
spring.datasource.password=senha

# Dialeto SQL melhorar o SQL gerado pelo Hibernate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

logging.level.org.springframework.jdbc.datasource.inir.ScriptUtils=debug
debug=true

spring.jackson.serialization.fail-on-empty-beans=false
#By default, Hibernate generates key from hibernate_sequence table, we can 
#disable it by setting this hibernate.use-new-id-generator-mappings to false.
spring.jpa.hibernate.use-new-id-generator-mappings=false

#Once we add this configuration to our application.properties file, we will have 
#space for 10 custom filters in front of the Spring Security filters.
spring.security.filter.order=10

#We can override the default Spring Boot configuration by adding few properties in application.properties. 
#Firstly, to change the default log file name:
server.tomcat.accesslog.suffix=.log
server.tomcat.accesslog.prefix=access_log
server.tomcat.accesslog.file-date-format=.yyyy-MM-dd
#Also, we can change the location of the log files:
server.tomcat.basedir=tomcat
server.tomcat.accesslog.directory=logs
#Finally, we can override the way logs are written in the log file:
server.tomcat.accesslog.pattern=common
#Tomcat server's internal logs are very helpful to solve any server-side issues.
#To view these logs, we have to add below logging configuration in application.properties:
logging.level.org.apache.tomcat=DEBUG
logging.level.org.apache.catalina=DEBUG

